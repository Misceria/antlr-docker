# Generated from C:/Users/klopp/PycharmProjects/ANTLR/Kilogram.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,23,186,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,
        1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,
        1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,
        1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
        1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
        1,15,1,16,1,16,5,16,117,8,16,10,16,12,16,120,9,16,1,17,4,17,123,
        8,17,11,17,12,17,124,1,18,4,18,128,8,18,11,18,12,18,129,1,18,1,18,
        5,18,134,8,18,10,18,12,18,137,9,18,1,18,1,18,4,18,141,8,18,11,18,
        12,18,142,1,18,4,18,146,8,18,11,18,12,18,147,3,18,150,8,18,1,19,
        1,19,1,19,4,19,155,8,19,11,19,12,19,156,1,19,3,19,160,8,19,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,171,8,20,1,21,1,21,
        1,21,3,21,176,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,185,8,
        22,0,0,23,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,1,0,4,4,0,9,10,13,13,32,32,39,39,4,0,48,57,65,90,95,95,97,122,
        3,0,42,43,45,45,47,47,2,0,60,60,62,62,200,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
        0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
        0,45,1,0,0,0,1,47,1,0,0,0,3,53,1,0,0,0,5,57,1,0,0,0,7,60,1,0,0,0,
        9,62,1,0,0,0,11,64,1,0,0,0,13,66,1,0,0,0,15,68,1,0,0,0,17,74,1,0,
        0,0,19,79,1,0,0,0,21,86,1,0,0,0,23,92,1,0,0,0,25,96,1,0,0,0,27,102,
        1,0,0,0,29,105,1,0,0,0,31,110,1,0,0,0,33,114,1,0,0,0,35,122,1,0,
        0,0,37,149,1,0,0,0,39,159,1,0,0,0,41,170,1,0,0,0,43,175,1,0,0,0,
        45,184,1,0,0,0,47,48,5,83,0,0,48,49,5,84,0,0,49,50,5,65,0,0,50,51,
        5,82,0,0,51,52,5,84,0,0,52,2,1,0,0,0,53,54,5,69,0,0,54,55,5,78,0,
        0,55,56,5,68,0,0,56,4,1,0,0,0,57,58,5,58,0,0,58,59,5,61,0,0,59,6,
        1,0,0,0,60,61,5,59,0,0,61,8,1,0,0,0,62,63,5,91,0,0,63,10,1,0,0,0,
        64,65,5,44,0,0,65,12,1,0,0,0,66,67,5,93,0,0,67,14,1,0,0,0,68,69,
        5,105,0,0,69,70,5,110,0,0,70,71,5,112,0,0,71,72,5,117,0,0,72,73,
        5,116,0,0,73,16,1,0,0,0,74,75,5,66,0,0,75,76,5,111,0,0,76,77,5,111,
        0,0,77,78,5,108,0,0,78,18,1,0,0,0,79,80,5,83,0,0,80,81,5,116,0,0,
        81,82,5,114,0,0,82,83,5,105,0,0,83,84,5,110,0,0,84,85,5,103,0,0,
        85,20,1,0,0,0,86,87,5,98,0,0,87,88,5,101,0,0,88,89,5,103,0,0,89,
        90,5,105,0,0,90,91,5,110,0,0,91,22,1,0,0,0,92,93,5,101,0,0,93,94,
        5,110,0,0,94,95,5,100,0,0,95,24,1,0,0,0,96,97,5,119,0,0,97,98,5,
        104,0,0,98,99,5,105,0,0,99,100,5,108,0,0,100,101,5,101,0,0,101,26,
        1,0,0,0,102,103,5,100,0,0,103,104,5,111,0,0,104,28,1,0,0,0,105,106,
        5,115,0,0,106,107,5,116,0,0,107,108,5,111,0,0,108,109,5,112,0,0,
        109,30,1,0,0,0,110,111,7,0,0,0,111,112,1,0,0,0,112,113,6,15,0,0,
        113,32,1,0,0,0,114,118,5,95,0,0,115,117,7,1,0,0,116,115,1,0,0,0,
        117,120,1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,34,1,0,0,0,120,
        118,1,0,0,0,121,123,2,48,57,0,122,121,1,0,0,0,123,124,1,0,0,0,124,
        122,1,0,0,0,124,125,1,0,0,0,125,36,1,0,0,0,126,128,2,48,57,0,127,
        126,1,0,0,0,128,129,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,
        131,1,0,0,0,131,135,5,46,0,0,132,134,2,48,57,0,133,132,1,0,0,0,134,
        137,1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,136,150,1,0,0,0,137,
        135,1,0,0,0,138,140,5,46,0,0,139,141,2,48,57,0,140,139,1,0,0,0,141,
        142,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,150,1,0,0,0,144,
        146,2,48,57,0,145,144,1,0,0,0,146,147,1,0,0,0,147,145,1,0,0,0,147,
        148,1,0,0,0,148,150,1,0,0,0,149,127,1,0,0,0,149,138,1,0,0,0,149,
        145,1,0,0,0,150,38,1,0,0,0,151,152,5,34,0,0,152,160,2,97,122,0,153,
        155,2,65,90,0,154,153,1,0,0,0,155,156,1,0,0,0,156,154,1,0,0,0,156,
        157,1,0,0,0,157,158,1,0,0,0,158,160,5,34,0,0,159,151,1,0,0,0,159,
        154,1,0,0,0,160,40,1,0,0,0,161,162,5,84,0,0,162,163,5,114,0,0,163,
        164,5,117,0,0,164,171,5,101,0,0,165,166,5,70,0,0,166,167,5,97,0,
        0,167,168,5,108,0,0,168,169,5,115,0,0,169,171,5,101,0,0,170,161,
        1,0,0,0,170,165,1,0,0,0,171,42,1,0,0,0,172,176,7,2,0,0,173,174,5,
        42,0,0,174,176,5,42,0,0,175,172,1,0,0,0,175,173,1,0,0,0,176,44,1,
        0,0,0,177,185,7,3,0,0,178,179,5,61,0,0,179,185,5,60,0,0,180,181,
        5,61,0,0,181,185,5,62,0,0,182,183,5,61,0,0,183,185,5,61,0,0,184,
        177,1,0,0,0,184,178,1,0,0,0,184,180,1,0,0,0,184,182,1,0,0,0,185,
        46,1,0,0,0,13,0,118,124,129,135,142,147,149,156,159,170,175,184,
        1,6,0,0
    ]

class KilogramLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    WS = 16
    ID = 17
    INT = 18
    REAL = 19
    STRING = 20
    BOOL = 21
    OPER = 22
    COMPARE = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'START'", "'END'", "':='", "';'", "'['", "','", "']'", "'input'", 
            "'Bool'", "'String'", "'begin'", "'end'", "'while'", "'do'", 
            "'stop'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "ID", "INT", "REAL", "STRING", "BOOL", "OPER", "COMPARE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "WS", "ID", "INT", "REAL", "STRING", "BOOL", 
                  "OPER", "COMPARE" ]

    grammarFileName = "Kilogram.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


